{"version":3,"sources":["components/Search.js","components/Movie.js","components/MovieList.js","reducers/movieReducer.js","views/Home.js","components/Header.js","components/MovieDetail.js","views/App.js","serviceWorker.js","index.js"],"names":["Search","props","useState","searchValue","setSearchValue","className","value","onChange","e","target","type","onClick","preventDefault","search","Movie","movie","history","useHistory","poster","Poster","movieId","push","console","log","bind","imdbID","Title","width","alt","src","Year","MovieList","loading","errorMessage","movies","map","index","key","initialState","reducer","state","action","payload","error","Home","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","Header","to","text","MovieDetail","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.da09fc8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n\nconst Search = (props) => {\n  const [searchValue, setSearchValue] = useState(\"\");\n  \n  const handleSearchInputChanges = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  const resetInputField = () => {\n    setSearchValue(\"\")\n  }\n\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  }\n\n  return (\n      <form className=\"search\">\n        <input\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          type=\"text\"\n        />\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n      </form>\n    );\n}\n\nexport default Search;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\n\nconst Movie = ({ movie }) => {\n  let history = useHistory();\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  const showDetailMovie = (movieId) => {\n    history.push(\"/movie/\" + movieId);\n    console.log('movieId', movieId);\n  }\n  return (\n    <div className=\"movie\" onClick={ showDetailMovie.bind(this, movie.imdbID) }>\n      <h2>{ movie.Title }</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={ `The movie titled: ${ movie.Title }` }\n          src={ poster }\n        />\n      </div>\n      <p>({ movie.Year })</p>\n    </div>\n  );\n};\n\n\nexport default Movie;","import React from \"react\";\nimport Movie from \"./Movie\";\nconst MovieList = ({loading, errorMessage, movies}) => {\n  return (\n    <div className=\"movies\">\n      { loading && !errorMessage ? (\n        <span>loading... </span>\n      ) : errorMessage ? (\n        <div className=\"errorMessage\">{ errorMessage }</div>\n      ) : (\n            movies.map((movie, index) => (\n              <Movie key={ `${ index }-${ movie.Title }` } movie={ movie } />\n            ))\n          ) }\n    </div>\n  )\n}\n\nexport default MovieList;","export const initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useReducer, useEffect } from \"react\";\n// import PropTypes from 'prop-types';\n\n\nimport Search from \"../components/Search\";\nimport MovieList from \"../components/MovieList\";\n\nimport { initialState, reducer } from \"../reducers/movieReducer\";\n\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst Home = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    fetch(`https://www.omdbapi.com/?s=${ searchValue }&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n  return (\n    <>\n      <Search search={ search } />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <MovieList movies={ movies } errorMessage={ errorMessage } loading={ loading } />\n    </>\n  )\n};\n\n// Home.propTypes = {\n//   children: PropTypes.node.isRequired\n// };\n\nexport default Home;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n  return (\n    <header className=\"App-header\">\n      <Link to=\"/\"><h2>{ props.text }</h2></Link>\n      {/* <Link to=\"/movie/1\"><h2>Detail</h2></Link> */}\n    </header>\n  );\n};\n\nexport default Header;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst MovieDetail = ({ movieId }) => {\n  console.log('MovieDetail:', movieId);\n  return (\n    <div>\n      <Link to=\"/\">Go back</Link>\n      <h1>Movie Detail</h1>\n    </div>\n  )\n}\n\nexport default MovieDetail;","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport Header from \"../components/Header\";\nimport MovieDetail from \"../components/MovieDetail\";\n\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header text=\"HOOKED\" />\n        <Switch>\n          <Route path=\"/\" component={ Home } exact />\n          <Route path=\"/movie/:id\" component={ MovieDetail } exact />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}